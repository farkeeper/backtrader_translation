#!/usr/bin/env python
# -*- coding: utf-8; py-indent-offset:4 -*-
# ====================================================
# 名称：元类 负责创建类，自定义元类 可以 控制 类的创建过程
# 简介：
# 时间：2022/10/4 - 12:48
# 作者：farserver@163.com
# ====================================================


class Meta(type):
    """自定义元类
    由他负责创建类,必须显式继承type
    __new__
        开辟内存空间，创建空对象（内存地址），内含三个变量 cls,base,attr 类对象，类对象的父类，类对象的属性
    """

    def __new__(cls, *bases, **kwargs):
        """为将要创建的类开辟空间"""
        return type.__new__(cls, *bases, **kwargs)


class MClass(metaclass=Meta):
    """自定义类 ，该类 由 自定义元类Meta负责创建
    如果不给出元类，自定义类 默认是由 type 负责创建的
    该类的创建过程：解析继承关系，确定元类，调用元类的call函数创建这个类
    如果没有call就先调用new后调用init"""

    def __init__(self):
        pass

# 类的创建过程（注意 不是 类的实例化过程）
# 第一步：解析继承关系（mro(cls)）
# 第二步：确定元类
# 第三步：调用元类的 __new__再调用__init__
#           __new__ 函数，开辟一块内存空间，创建空对象（内存地址），内含三个变量 cls,base,attr
#           把刚刚创建好的对象赋值给__init__ 的 cls
# 第四步：再执行 () :调用元类的call函数



# 类的实例化过程
# 调用类体内的__init__函数 进行实例化


# 实例化 的 整个流程：
# 第一步：解析类的继承关系，确定该类的元类，由元类创建 该类
# 第二步：调用类内的init函数，初始化赋值，再进行一些骚操作，完成实例化

if __name__ == "__main__":
    m = MClass()
    print("打印出一个内存地址（指针）:对象", m)
    # python一切皆对象，一切皆指针，一切皆内存地址，常量、变量、函数、类、元类、就连所有代码也是个对象
    # 只要是对象就一定包括：名字和属性
    # 对象就是个内存地址
